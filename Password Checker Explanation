Password Checker Explanation
Here's the breakdown of the Python code for the password checker:

# Importing Libraries:
string: Contains string constants.
getpass: Provides secure password input. Password will not be visable while typing it.

![pwd1](https://github.com/NPotter44/Pwd-Strength-Check/assets/144384452/ba5ea86f-9ec4-444c-9724-eb504f222b6e)

## Defining Functions:
check_pwd(): Function to check password strength.

## Statements:
for: The for loop iterates over each character in the password.
char: Is a variable that represents each character in the password string as the loop iterates.
if,else,elif: Are Statements used to perform different actions based on certain conditions for each character in the password.
LINE 12 - if char in string.ascii_lowercase:: Checks if the current character (char) is a lowercase letter. If the condition is true, it increments the lower_count variable by 1, indicating the presence of a lowercase letter in the password.
LINE 14 - elif char in string.ascii_uppercase:: Checks if the current character (char) is an uppercase letter. If the condition is true, it increments the upper_count variable by 1, indicating the presence of an uppercase letter in the password.
LINE 16 - elif char in string.digits:: Checks if the current character (char) is a digit (0-9). If the condition is true, it increments the num_count variable by 1, indicating the presence of a numeric character in the password.
LINE 18 - elif char == ' ':: hecks if the current character (char) is a whitespace character. If the condition is true, it increments the wspace_count variable by 1, indicating the presence of a whitespace character in the password.
LINE 20 - else:: This block is executed if none of the previous conditions are true, meaning the character is neither a lowercase letter, nor an uppercase letter, nor a digit, nor a whitespace character. In this case, it increments the special_count variable by 1, indicating the presence of a special character (anything that is not a letter, digit, or whitespace) in the password.

These next statements are used to check different conditions based on the length of the password (password_length) and provide corresponding remarks.
LINE 23if password_length > 6: Checks if the length of the password is less than 6 characters. If the condition is true, it adds a remark to the remarks variable indicating that the password should have at least 6 characters.
LINE 25elif password_length > 12: Checks if the length of the password is greater than 12 characters. If the condition is true, it adds a remark to the remarks variable indicating that the password has 12 characters or more, which is considered great.
LINE 27else: This block is executed if none of the previous conditions are true, meaning the length of the password is between 6 and 12 characters (inclusive). In this case, it increments the strength variable by 1, indicating that the password meets the minimum length requirement and is considered to have some strength.

Next if any of these conditions are true, it indicates that the password contains at least one character of that type, so the strength of the password (strength) is increased by 1.
LINE 30if lower_count >= 1:: Checks if the count of lowercase characters (lower_count) is greater than or equal to 1. If true, it increments the strength variable by 1, indicating that the password contains at least one lowercase character.
LINE 32if upper_count >= 1:: Checks if the count of uppercase characters (upper_count) is greater than or equal to 1. If true, it increments the strength variable by 1, indicating that the password contains at least one uppercase character.
LINE 34if num_count >= 1:: Checks if the count of numeric characters (num_count) is greater than or equal to 1. If true, it increments the strength variable by 1, indicating that the password contains at least one numeric character.
LINE 36if wspace_count >= 1:: Checks if the count of whitespace characters (wspace_count) is greater than or equal to 1. If true, it increments the strength variable by 1, indicating that the password contains at least one whitespace character.
LINE 38if special_count >= 1:: Checks if the count of special characters (special_count) is greater than or equal to 1. If true, it increments the strength variable by 1, indicating that the password contains at least one special character.

These statements are used to provide remarks about the strength of the password based on the value of the strength variable.
LINE 41if strength == 1:: Checks if the strength of the password is 1. If true, it adds a remark to the remarks variable indicating that the password is very weak.
LINE 43elif strength == 2:: Checks if the strength of the password is 2. If true, it adds a remark to the remarks variable indicating that the password is weak.
LINE 45elif strength == 3:: Checks if the strength of the password is 3. If true, it adds a remark to the remarks variable indicating that the password is good.
LINE 47elif strength == 4:: Checks if the strength of the password is 4. If true, it adds a remark to the remarks variable indicating that the password is strong.
LINE 49elif strength == 5‚Äù: Checks if the strength of the password is 5. If true, it adds a remark to the remarks variable indicating that the password is very strong.

print() Function: The print() function is used to display messages or output to the console.
Overall, these print() statements provide detailed information about the composition of the password, including the counts of lowercase, uppercase, numeric, whitespace, and special characters. This feedback helps the user understand the characteristics of their password.

LINE 62 - Function Definition:def ask_pwd(another_pwd=False):: Function to ask user if they want to check or change their password.
LINE 63 - Variable Initialization:valid = False: Initializes a variable valid to False. This variable is used to control the validation loop.
LINE 64 - Input Prompt:if another_pwd:: Checks if the another_pwd parameter is True. If it is, it means the function is being used to ask if the user wants to change their password. choice = input('Do you want to change your password? (y/n): '): Prompts the user to input a choice ('y' for yes, 'n' for no) about changing their password.
LINE 69 - Conditional Loop:while not valid: This creates a loop that continues until the valid variable becomes True. This loop is used to ensure that the user enters a valid choice ('y' or 'n').
User Input Validation:
LINE 70 if choice.lower() == 'y':: Checks if the user's input (converted to lowercase) is 'y' (indicating yes). If true, it returns True, indicating that the user wants to proceed.
LINE 72elif choice.lower() == 'n':: Checks if the user's input (converted to lowercase) is 'n' (indicating no). If true, it returns False, indicating that the user does not want to proceed.
LINE 74else:: If the user input is neither 'y' nor 'n', it means the input is invalid.
Prints a message indicating that the input is invalid and prompts the user to try again. Overall, this function prompts the user to choose whether they want to check their password or change it. It ensures that the user provides a valid input ('y' or 'n') and returns True if the user wants to proceed and False if they do not.

Main Execution:
if __name__ == '__main__':: Executes code if script is run directly.
print('Welcome to Password Checker!'): Displays welcome message.
print('Your password will be checked on a scale of 1 to 5...'): Provides information about password strength scale.
Loop to repeatedly check passwords:
check_pwd(): Calls function to check password.
ask_pw = ask_pwd(True): Calls function to ask if user wants to change password.
